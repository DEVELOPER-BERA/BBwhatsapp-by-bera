<!DOCTYPE html>
<html>
<head>
  <title>BBWhatsApp Chat</title>
  <link rel="stylesheet" href="/css/chat.css">
  <script src="/socket.io/socket.io.js"></script>
</head>
<body>
  <div class="chat-container">
    <!-- Sidebar -->
    <div class="sidebar">
      <h2><%= user %></h2>
      <h3>Users</h3>
      <ul id="userList">
        <% users.forEach(u => { %>
          <li class="user" data-username="<%= u %>"><%= u %></li>
        <% }) %>
      </ul>

      <h3>Groups</h3>
      <ul id="groupList">
        <% Object.keys(groups).forEach(g => { %>
          <li class="group" data-group="<%= g %>"><%= g %></li>
        <% }) %>
      </ul>

      <h3>Global Chat</h3>
      <button id="globalBtn">Enter Global Chat</button>
    </div>

    <!-- Chat Window -->
    <div class="chat-window">
      <div id="chatHeader">Global Chat</div>
      <div id="messages">
        <% globalMessages.forEach(m => { %>
          <div class="msg"><strong><%= m.username %>:</strong> <%= m.text %></div>
        <% }) %>
      </div>
      <form id="chatForm">
        <input id="msgInput" autocomplete="off" placeholder="Type a message..."/>
        <button>Send</button>
      </form>
    </div>
  </div>

  <script>
    const socket = io();
    const user = "<%= user %>";
    const msgInput = document.getElementById("msgInput");
    const chatForm = document.getElementById("chatForm");
    const messages = document.getElementById("messages");
    const chatHeader = document.getElementById("chatHeader");

    let currentChat = "global"; // global | private:username | group:groupName

    socket.emit("join", user);

    // --- Global Chat ---
    socket.on("globalMessage", (msg) => {
      if (currentChat === "global") {
        appendMsg(msg);
      }
    });

    // --- Private Chat ---
    socket.on("privateMessage", (msg) => {
      if (currentChat === `private:${msg.from}` || currentChat === `private:${msg.to}`) {
        appendMsg({ username: msg.from, text: msg.text });
      }
    });

    // --- Group Messages ---
    socket.on("groupMessages", ({ room, messages: msgs }) => {
      if (currentChat === `group:${room}`) {
        messages.innerHTML = "";
        msgs.forEach(m => appendMsg(m));
      }
    });
    socket.on("groupMessage", ({ room, message }) => {
      if (currentChat === `group:${room}`) {
        appendMsg(message);
      }
    });

    // --- Switch Chats ---
    document.querySelectorAll(".user").forEach(u => {
      u.addEventListener("click", () => {
        const target = u.dataset.username;
        currentChat = `private:${target}`;
        chatHeader.innerText = "Chat with " + target;
        messages.innerHTML = "";
      });
    });

    document.querySelectorAll(".group").forEach(g => {
      g.addEventListener("click", () => {
        const group = g.dataset.group;
        currentChat = `group:${group}`;
        chatHeader.innerText = group;
        messages.innerHTML = "";
        socket.emit("joinRoom", group);
      });
    });

    document.getElementById("globalBtn").addEventListener("click", () => {
      currentChat = "global";
      chatHeader.innerText = "Global Chat";
      messages.innerHTML = "";
      <% globalMessages.forEach(m => { %>
        appendMsg({ username: "<%= m.username %>", text: "<%= m.text %>" });
      <% }) %>
    });

    // --- Send Message ---
    chatForm.addEventListener("submit", (e) => {
      e.preventDefault();
      if (!msgInput.value) return;

      if (currentChat === "global") {
        socket.emit("chatMessage", { username: user, text: msgInput.value });
      } else if (currentChat.startsWith("private:")) {
        const to = currentChat.split(":")[1];
        socket.emit("privateMessage", { to, text: msgInput.value });
      } else if (currentChat.startsWith("group:")) {
        const room = currentChat.split(":")[1];
        socket.emit("groupMessage", { room, text: msgInput.value });
      }

      msgInput.value = "";
    });

    function appendMsg(msg) {
      const div = document.createElement("div");
      div.classList.add("msg");
      div.innerHTML = `<strong>${msg.username}:</strong> ${msg.text}`;
      messages.appendChild(div);
      messages.scrollTop = messages.scrollHeight;
    }
  </script>
</body>
</html>
